{"ast":null,"code":"import { ethers } from \"ethers\";\nimport IdentityABI from \"../contracts/DecentralizedIdentity.json\";\nconst contractAddress = \"YOUR_DEPLOYED_CONTRACT_ADDRESS\";\nexport const getContract = signer => {\n  return new ethers.Contract(contractAddress, IdentityABI.abi, signer);\n};\nexport const createDID = async signer => {\n  const contract = getContract(signer);\n  const tx = await contract.createDID();\n  await tx.wait();\n};\nexport const issueCredential = async (signer, user, issuer, dataHash, expirationTimestamp, signature) => {\n  const contract = getContract(signer);\n  const tx = await contract.issueCredential(user, issuer, dataHash, expirationTimestamp, signature);\n  await tx.wait();\n};\nexport const grantAccess = async (signer, verifier) => {\n  const contract = getContract(signer);\n  const tx = await contract.grantAccess(verifier);\n  await tx.wait();\n};\nexport const getCredentials = async (signer, user) => {\n  const contract = getContract(signer);\n  return await contract.getCredentials(user);\n};","map":{"version":3,"names":["ethers","IdentityABI","contractAddress","getContract","signer","Contract","abi","createDID","contract","tx","wait","issueCredential","user","issuer","dataHash","expirationTimestamp","signature","grantAccess","verifier","getCredentials"],"sources":["P:/mlsc/New folder/decentralized-identity-ui/src/contract.js"],"sourcesContent":["import { ethers } from \"ethers\";\r\nimport IdentityABI from \"../contracts/DecentralizedIdentity.json\";\r\n\r\nconst contractAddress = \"YOUR_DEPLOYED_CONTRACT_ADDRESS\";\r\n\r\nexport const getContract = (signer) => {\r\n  return new ethers.Contract(contractAddress, IdentityABI.abi, signer);\r\n};\r\n\r\nexport const createDID = async (signer) => {\r\n  const contract = getContract(signer);\r\n  const tx = await contract.createDID();\r\n  await tx.wait();\r\n};\r\n\r\nexport const issueCredential = async (signer, user, issuer, dataHash, expirationTimestamp, signature) => {\r\n  const contract = getContract(signer);\r\n  const tx = await contract.issueCredential(user, issuer, dataHash, expirationTimestamp, signature);\r\n  await tx.wait();\r\n};\r\n\r\nexport const grantAccess = async (signer, verifier) => {\r\n  const contract = getContract(signer);\r\n  const tx = await contract.grantAccess(verifier);\r\n  await tx.wait();\r\n};\r\n\r\nexport const getCredentials = async (signer, user) => {\r\n  const contract = getContract(signer);\r\n  return await contract.getCredentials(user);\r\n};\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,yCAAyC;AAEjE,MAAMC,eAAe,GAAG,gCAAgC;AAExD,OAAO,MAAMC,WAAW,GAAIC,MAAM,IAAK;EACrC,OAAO,IAAIJ,MAAM,CAACK,QAAQ,CAACH,eAAe,EAAED,WAAW,CAACK,GAAG,EAAEF,MAAM,CAAC;AACtE,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAOH,MAAM,IAAK;EACzC,MAAMI,QAAQ,GAAGL,WAAW,CAACC,MAAM,CAAC;EACpC,MAAMK,EAAE,GAAG,MAAMD,QAAQ,CAACD,SAAS,CAAC,CAAC;EACrC,MAAME,EAAE,CAACC,IAAI,CAAC,CAAC;AACjB,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOP,MAAM,EAAEQ,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,KAAK;EACvG,MAAMR,QAAQ,GAAGL,WAAW,CAACC,MAAM,CAAC;EACpC,MAAMK,EAAE,GAAG,MAAMD,QAAQ,CAACG,eAAe,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,CAAC;EACjG,MAAMP,EAAE,CAACC,IAAI,CAAC,CAAC;AACjB,CAAC;AAED,OAAO,MAAMO,WAAW,GAAG,MAAAA,CAAOb,MAAM,EAAEc,QAAQ,KAAK;EACrD,MAAMV,QAAQ,GAAGL,WAAW,CAACC,MAAM,CAAC;EACpC,MAAMK,EAAE,GAAG,MAAMD,QAAQ,CAACS,WAAW,CAACC,QAAQ,CAAC;EAC/C,MAAMT,EAAE,CAACC,IAAI,CAAC,CAAC;AACjB,CAAC;AAED,OAAO,MAAMS,cAAc,GAAG,MAAAA,CAAOf,MAAM,EAAEQ,IAAI,KAAK;EACpD,MAAMJ,QAAQ,GAAGL,WAAW,CAACC,MAAM,CAAC;EACpC,OAAO,MAAMI,QAAQ,CAACW,cAAc,CAACP,IAAI,CAAC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}