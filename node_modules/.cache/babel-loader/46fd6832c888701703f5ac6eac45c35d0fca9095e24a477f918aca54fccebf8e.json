{"ast":null,"code":"import { BrowserProvider } from \"ethers\";\nexport const connectWallet = async () => {\n  try {\n    if (!window.ethereum) {\n      alert(\"Please install Metamask!\");\n      return null;\n    }\n    const provider = new BrowserProvider(window.ethereum);\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    const signer = await provider.getSigner();\n    return {\n      signer,\n      address: accounts[0]\n    };\n  } catch (err) {\n    console.error(\"Error connecting wallet:\", err);\n    return null;\n  }\n};","map":{"version":3,"names":["BrowserProvider","connectWallet","window","ethereum","alert","provider","accounts","request","method","signer","getSigner","address","err","console","error"],"sources":["P:/mlsc/New folder/decentralized-identity-ui/src/utils/web3.js"],"sourcesContent":["import { BrowserProvider } from \"ethers\";\r\n\r\nexport const connectWallet = async () => {\r\n  try {\r\n    if (!window.ethereum) {\r\n      alert(\"Please install Metamask!\");\r\n      return null;\r\n    }\r\n\r\n    const provider = new BrowserProvider(window.ethereum);\r\n    const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n    const signer = await provider.getSigner();\r\n\r\n    return {\r\n      signer,\r\n      address: accounts[0],\r\n    };\r\n  } catch (err) {\r\n    console.error(\"Error connecting wallet:\", err);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,QAAQ;AAExC,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;MACpBC,KAAK,CAAC,0BAA0B,CAAC;MACjC,OAAO,IAAI;IACb;IAEA,MAAMC,QAAQ,GAAG,IAAIL,eAAe,CAACE,MAAM,CAACC,QAAQ,CAAC;IACrD,MAAMG,QAAQ,GAAG,MAAMJ,MAAM,CAACC,QAAQ,CAACI,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAsB,CAAC,CAAC;IACjF,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,SAAS,CAAC,CAAC;IAEzC,OAAO;MACLD,MAAM;MACNE,OAAO,EAAEL,QAAQ,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;IAC9C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}