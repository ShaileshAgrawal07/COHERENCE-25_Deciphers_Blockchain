{"ast":null,"code":"import { ethers } from 'ethers';\nexport const connectWallet = async () => {\n  if (!window.ethereum) {\n    alert('MetaMask is required to connect.');\n    return null;\n  }\n  try {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const address = await signer.getAddress();\n    return {\n      provider,\n      signer,\n      address\n    };\n  } catch (error) {\n    console.error('Wallet connection failed:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["ethers","connectWallet","window","ethereum","alert","provider","BrowserProvider","signer","getSigner","address","getAddress","error","console"],"sources":["P:/mlsc/New folder/decentralized-identity-ui/src/utils/web3.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\nexport const connectWallet = async () => {\r\n  if (!window.ethereum) {\r\n    alert('MetaMask is required to connect.');\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n    const address = await signer.getAddress();\r\n    return { provider, signer, address };\r\n  } catch (error) {\r\n    console.error('Wallet connection failed:', error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAE/B,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IACpBC,KAAK,CAAC,kCAAkC,CAAC;IACzC,OAAO,IAAI;EACb;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACM,eAAe,CAACJ,MAAM,CAACC,QAAQ,CAAC;IAC5D,MAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;IACzC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;IACzC,OAAO;MAAEL,QAAQ;MAAEE,MAAM;MAAEE;IAAQ,CAAC;EACtC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}